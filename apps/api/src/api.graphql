# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type HelloWorld {
  message: String!
}

type ContentItem {
  id: ID!
  title: String
  content: String
  tag: [String!]
  category: String
  categorySlug: String
  categoryDescription: String
  group: String
  groupSlug: String
  groupDescription: String
  contentBlob: String
  contentId: String
  contentType: String
  date: String
  image: String
  imageText: String
  lang: String
  slug: String
}

type SearchResult {
  total: Int!
  items: [ContentItem!]!
}

type ContentCategory {
  title: String
  slug: String
  description: String
}

type Taxonomy {
  title: String
  slug: String
  description: String
}

type Article {
  id: String!
  slug: String!
  title: String!
  content: String
  group: Taxonomy
  category: Taxonomy
  relatedArticles: [Article!]!
}

type AdgerdirTag {
  id: String
  title: String
}

type AdgerdirPage {
  id: String!
  title: String!
  description: String!
  longDescription: String
  content: String
  objective: String
  slug: String!
  tags: [AdgerdirTag!]!
  link: String
  linkButtonText: String
  status: String!
  estimatedCostIsk: Float
  finalCostIsk: Float
}

type AdgerdirPages {
  items: [AdgerdirPage!]!
}

type Image {
  url: String!
  title: String!
  contentType: String!
  width: Int!
  height: Int!
}

type AdgerdirNews {
  id: String!
  slug: String!
  subtitle: String!
  title: String!
  intro: String!
  image: Image
  date: String!
  content: String
}

type AdgerdirFrontpage {
  id: String!
  title: String!
  description: String!
  content: String
  slices: [AdgerdirSlice!]!
}

union AdgerdirSlice = AdgerdirGroupSlice | AdgerdirFeaturedNewsSlice

type AdgerdirGroupSlice {
  id: ID!
  subtitle: String
  title: String!
  description: String
  image: Image
  pages: [AdgerdirPage!]!
}

type AdgerdirFeaturedNewsSlice {
  id: ID!
  title: String!
  featured: [AdgerdirNews!]!
}

type FrontpageSlide {
  subtitle: String
  title: String
  content: String
  image: Image
  link: String
}

type FrontpageSliderList {
  items: [FrontpageSlide!]!
}

type News {
  id: String!
  slug: String!
  title: String!
  intro: String!
  image: Image
  date: String!
  content: String
}

type Pagination {
  page: Int!
  perPage: Int!
  totalResults: Int!
  totalPages: Int!
}

type PaginatedNews {
  page: Pagination!
  news: [News!]!
}

type Namespace {
  namespace: String
  fields: String
}

type Link {
  text: String!
  url: String!
}

type TimelineEvent {
  id: ID!
  title: String!
  date: String!
  numerator: Int
  denominator: Int
  label: String!
  body: String
  tags: [String!]!
  link: String!
}

type Story {
  label: String!
  title: String!
  logo: Image!
  readMoreText: String!
  date: String!
  intro: String!
  body: String
}

type LinkCard {
  title: String!
  body: String!
  link: String!
  linkText: String!
}

type NumberBullet {
  id: ID!
  title: String!
  body: String!
}

type AboutPage {
  title: String!
  seoDescription: String!
  theme: String!
  slices: [Slice!]!
}

union Slice = PageHeaderSlice | TimelineSlice | HeadingSlice | StorySlice | LinkCardSlice | LatestNewsSlice | MailingListSignupSlice | LogoListSlice | BulletListSlice

type PageHeaderSlice {
  id: ID!
  title: String!
  introduction: String!
  navigationText: String!
  links: [Link!]!
  slices: [Slice!]!
}

type TimelineSlice {
  id: ID!
  title: String!
  events: [TimelineEvent!]!
}

type HeadingSlice {
  id: ID!
  title: String!
  body: String!
}

type StorySlice {
  id: ID!
  readMoreText: String!
  stories: [Story!]!
}

type LinkCardSlice {
  id: ID!
  title: String!
  cards: [LinkCard!]!
}

type LatestNewsSlice {
  id: ID!
  title: String!
  news: [News!]!
}

type MailingListSignupSlice {
  id: ID!
  title: String!
  description: String
  inputLabel: String!
  buttonText: String!
}

type LogoListSlice {
  id: ID!
  title: String!
  body: String!
  images: [Image!]!
}

type BulletListSlice {
  id: ID!
  bullets: [BulletEntry!]!
}

union BulletEntry = IconBullet | NumberBulletGroup

type IconBullet {
  id: ID!
  title: String!
  body: String!
  icon: Image!
  url: String
  linkText: String
}

type NumberBulletGroup {
  id: ID!
  defaultVisible: Int!
  bullets: [NumberBullet!]!
}

type LinkList {
  title: String
  links: [Link!]!
}

type LandingPage {
  title: String!
  slug: String!
  introduction: String!
  image: Image
  actionButton: Link
  links: LinkList
  content: String
}

type GenericPage {
  title: String!
  slug: String!
  intro: String
  mainContent: String
  sidebar: String
  misc: String
}

type Menu {
  title: String!
  links: [Link!]!
}

type AdgerdirTags {
  items: [AdgerdirTag!]!
}

type Application {
  id: ID!
  created: DateTime!
  modified: DateTime!
  applicant: String!
  assignee: String!
  externalId: String
  state: ApplicationStateEnum!
  attachments: JSON
  typeId: ApplicationTypeIdEnum!
  answers: JSON!
  externalData: JSON!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ApplicationStateEnum {
  DRAFT
  BEINGPROCESSED
  NEEDSINFORMATION
  PENDING
  APPROVED
  MANUALAPPROVED
  REJECTED
  UNKNOWN
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ApplicationTypeIdEnum {
  ExampleForm
  ExampleForm2
  ExampleForm3
  FamilyAndPets
  ParentalLeave
}

type PresignedPost {
  url: String!
  fields: JSON!
}

type Document {
  id: ID!
  date: DateTime!
  subject: String!
  senderName: String!
  senderNatReg: String!
  opened: Boolean!
}

type ApiCatalogue {
  id: ID!
  owner: String!
  serviceName: String!
  description: String!
  url: String!
  pricing: PricingCategoryEnum!
  data: DataCategoryEnum!
  type: TypeCategoryEnum!
  access: accessCategoryEnum!
}

enum PricingCategoryEnum {
  FREE
  USAGE
  DAILY
  MONTHLY
  YEARLY
  CUSTOM
}

enum DataCategoryEnum {
  PUBLIC
  OFFICIAL
  PERSONAL
  HEALTH
  FINANCIAL
}

enum TypeCategoryEnum {
  REST
  SOAP
  GRAPHQL
}

enum accessCategoryEnum {
  XROAD
  APIGW
}

type Query {
  helloWorld(input: HelloWorldInput!): HelloWorld!
  searchResults(query: SearcherInput!): SearchResult!
  singleItem(input: ItemInput!): ContentItem
  categories(input: CategoriesInput!): [ContentCategory!]!
  articlesInCategory(category: ArticlesInCategoryInput!): [ContentItem!]!
  getArticle(input: GetArticleInput!): Article
  getNews(input: GetNewsInput!): News
  getNewsList(input: GetNewsListInput!): PaginatedNews!
  getNamespace(input: GetNamespaceInput!): Namespace
  getAboutPage(input: GetAboutPageInput!): AboutPage!
  getLandingPage(input: GetLandingPageInput!): LandingPage
  getGenericPage(input: GetGenericPageInput!): GenericPage
  getAdgerdirPage(input: GetAdgerdirPageInput!): AdgerdirPage
  getAdgerdirPages(input: GetAdgerdirPagesInput!): AdgerdirPages!
  getAdgerdirTags(input: GetAdgerdirTagsInput!): AdgerdirTags
  getFrontpageSliderList(input: GetFrontpageSliderListInput!): FrontpageSliderList
  getAdgerdirFrontpage(input: GetAdgerdirFrontpageInput!): AdgerdirFrontpage
  getMenu(input: GetMenuInput!): Menu
  getApplication(input: GetApplicationInput!): Application
  getApplicationsByType(input: GetApplicationsByTypeInput!): [Application!]
  getDocument(input: GetDocumentInput!): Document
  getCatalogues: [ApiCatalogue!]!
}

input HelloWorldInput {
  name: String = "World"
}

input SearcherInput {
  queryString: String
  language: ContentLanguage
  size: Int
  page: Int
}

enum ContentLanguage {
  is
  en
}

input ItemInput {
  id: ID
  slug: String
  type: ItemType
  language: ContentLanguage
}

enum ItemType {
  article
  category
}

input CategoriesInput {
  language: ContentLanguage
}

input ArticlesInCategoryInput {
  slug: String
  language: ContentLanguage
}

input GetArticleInput {
  slug: String
  lang: String!
}

input GetNewsInput {
  slug: String!
  lang: String
}

input GetNewsListInput {
  lang: String
  year: Int
  month: Int
  ascending: Boolean
  page: Int
  perPage: Int
}

input GetNamespaceInput {
  namespace: String
  lang: String!
}

input GetAboutPageInput {
  lang: String!
}

input GetLandingPageInput {
  slug: String!
  lang: String!
}

input GetGenericPageInput {
  slug: String!
  lang: String!
}

input GetAdgerdirPageInput {
  slug: String
  lang: String!
}

input GetAdgerdirPagesInput {
  lang: String
  perPage: Int
}

input GetAdgerdirTagsInput {
  lang: String
}

input GetFrontpageSliderListInput {
  lang: String
}

input GetAdgerdirFrontpageInput {
  lang: String!
}

input GetMenuInput {
  name: String!
  lang: String!
}

input GetApplicationInput {
  id: String!
}

input GetApplicationsByTypeInput {
  typeId: ApplicationTypeIdEnum!
}

input GetDocumentInput {
  id: String!
}

type Mutation {
  createApplication(input: CreateApplicationInput!): Application
  updateApplication(input: UpdateApplicationInput!): Application
  updateApplicationExternalData(input: UpdateApplicationExternalDataInput!): Application
  addAttachment(input: AddAttachmentInput!): Application
  deleteAttachment(input: DeleteAttachmentInput!): Application
  createUploadUrl(filename: String!): PresignedPost!
}

input CreateApplicationInput {
  applicant: String!
  assignee: String!
  externalId: String
  state: CreateApplicationDtoStateEnum!
  attachments: JSON
  typeId: CreateApplicationDtoTypeIdEnum!
  answers: JSON!
}

enum CreateApplicationDtoStateEnum {
  DRAFT
  BEINGPROCESSED
  NEEDSINFORMATION
  PENDING
  APPROVED
  MANUALAPPROVED
  REJECTED
  UNKNOWN
}

enum CreateApplicationDtoTypeIdEnum {
  ExampleForm
  ExampleForm2
  ExampleForm3
  FamilyAndPets
  ParentalLeave
}

input UpdateApplicationInput {
  id: String!
  typeId: UpdateApplicationDtoTypeIdEnum!
  applicant: String
  assignee: String
  externalId: String
  state: UpdateApplicationDtoStateEnum
  attachments: JSON
  answers: JSON
}

enum UpdateApplicationDtoTypeIdEnum {
  ExampleForm
  ExampleForm2
  ExampleForm3
  FamilyAndPets
  ParentalLeave
}

enum UpdateApplicationDtoStateEnum {
  DRAFT
  BEINGPROCESSED
  NEEDSINFORMATION
  PENDING
  APPROVED
  MANUALAPPROVED
  REJECTED
  UNKNOWN
}

input UpdateApplicationExternalDataInput {
  id: String!
  dataProviders: [DataProvider!]!
}

input DataProvider {
  id: String!
  type: DataProviderDtoTypeEnum!
}

enum DataProviderDtoTypeEnum {
  ExpectedDateOfBirth
  ExampleFails
  ExampleSucceeds
}

input AddAttachmentInput {
  id: String!
  key: String!
  url: String!
}

input DeleteAttachmentInput {
  id: String!
  key: String!
}
