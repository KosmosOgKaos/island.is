/* tslint:disable */
/* eslint-disable */
/**
 * IslandIs.Skjalabirting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  CategoriesResponse,
  CategoriesResponseFromJSON,
  CategoriesResponseToJSON,
  DocumentDTO,
  DocumentDTOFromJSON,
  DocumentDTOToJSON,
  ListDocumentsResponse,
  ListDocumentsResponseFromJSON,
  ListDocumentsResponseToJSON,
} from '../models'

export interface CustomersArchiveRequest {
  kennitala: string
  messageId: string
}

export interface CustomersBatchArchiveRequest {
  kennitala: string
  ids: Array<string>
}

export interface CustomersBookmarkRequest {
  kennitala: string
  messageId: string
}

export interface CustomersCategoriesRequest {
  kennitala: string
}

export interface CustomersDocumentRequest {
  kennitala: string
  messageId: string
  authenticationType: string
}

export interface CustomersListDocumentsRequest {
  kennitala: string
  dateFrom?: Date
  dateTo?: Date
  categoryId?: string
  typeId?: string
  archived?: boolean
  sortBy?: string
  page?: number
  pageSize?: number
}

export interface CustomersUnarchiveRequest {
  kennitala: string
  messageId: string
}

export interface CustomersUnbookmarkRequest {
  kennitala: string
  messageId: string
}

/**
 *
 */
export class CustomersApi extends runtime.BaseAPI {
  /**
   */
  async customersArchiveRaw(
    requestParameters: CustomersArchiveRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersArchive.',
      )
    }

    if (
      requestParameters.messageId === null ||
      requestParameters.messageId === undefined
    ) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling customersArchive.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/archive`
        .replace(
          `{${'kennitala'}}`,
          encodeURIComponent(String(requestParameters.kennitala)),
        )
        .replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async customersArchive(
    requestParameters: CustomersArchiveRequest,
  ): Promise<void> {
    await this.customersArchiveRaw(requestParameters)
  }

  /**
   */
  async customersBatchArchiveRaw(
    requestParameters: CustomersBatchArchiveRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersBatchArchive.',
      )
    }

    if (requestParameters.ids === null || requestParameters.ids === undefined) {
      throw new runtime.RequiredError(
        'ids',
        'Required parameter requestParameters.ids was null or undefined when calling customersBatchArchive.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/batcharchive`.replace(
        `{${'kennitala'}}`,
        encodeURIComponent(String(requestParameters.kennitala)),
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.ids,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async customersBatchArchive(
    requestParameters: CustomersBatchArchiveRequest,
  ): Promise<void> {
    await this.customersBatchArchiveRaw(requestParameters)
  }

  /**
   */
  async customersBookmarkRaw(
    requestParameters: CustomersBookmarkRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersBookmark.',
      )
    }

    if (
      requestParameters.messageId === null ||
      requestParameters.messageId === undefined
    ) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling customersBookmark.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/bookmark`
        .replace(
          `{${'kennitala'}}`,
          encodeURIComponent(String(requestParameters.kennitala)),
        )
        .replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async customersBookmark(
    requestParameters: CustomersBookmarkRequest,
  ): Promise<void> {
    await this.customersBookmarkRaw(requestParameters)
  }

  /**
   */
  async customersCategoriesRaw(
    requestParameters: CustomersCategoriesRequest,
  ): Promise<runtime.ApiResponse<CategoriesResponse>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersCategories.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/categories`.replace(
        `{${'kennitala'}}`,
        encodeURIComponent(String(requestParameters.kennitala)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CategoriesResponseFromJSON(jsonValue),
    )
  }

  /**
   */
  async customersCategories(
    requestParameters: CustomersCategoriesRequest,
  ): Promise<CategoriesResponse> {
    const response = await this.customersCategoriesRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async customersDocumentRaw(
    requestParameters: CustomersDocumentRequest,
  ): Promise<runtime.ApiResponse<DocumentDTO>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersDocument.',
      )
    }

    if (
      requestParameters.messageId === null ||
      requestParameters.messageId === undefined
    ) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling customersDocument.',
      )
    }

    if (
      requestParameters.authenticationType === null ||
      requestParameters.authenticationType === undefined
    ) {
      throw new runtime.RequiredError(
        'authenticationType',
        'Required parameter requestParameters.authenticationType was null or undefined when calling customersDocument.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    if (requestParameters.authenticationType !== undefined) {
      queryParameters['authenticationType'] =
        requestParameters.authenticationType
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}`
        .replace(
          `{${'kennitala'}}`,
          encodeURIComponent(String(requestParameters.kennitala)),
        )
        .replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })
    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DocumentDTOFromJSON(jsonValue),
    )
  }

  /**
   */
  async customersDocument(
    requestParameters: CustomersDocumentRequest,
  ): Promise<DocumentDTO> {
    const response = await this.customersDocumentRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async customersListDocumentsRaw(
    requestParameters: CustomersListDocumentsRequest,
  ): Promise<runtime.ApiResponse<ListDocumentsResponse>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersListDocuments.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    if (requestParameters.dateFrom !== undefined) {
      queryParameters[
        'dateFrom'
      ] = (requestParameters.dateFrom as any).toISOString()
    }

    if (requestParameters.dateTo !== undefined) {
      queryParameters[
        'dateTo'
      ] = (requestParameters.dateTo as any).toISOString()
    }

    if (requestParameters.categoryId !== undefined) {
      queryParameters['categoryId'] = requestParameters.categoryId
    }

    if (requestParameters.typeId !== undefined) {
      queryParameters['typeId'] = requestParameters.typeId
    }

    if (requestParameters.archived !== undefined) {
      queryParameters['archived'] = requestParameters.archived
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy
    }

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }
    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages`.replace(
        `{${'kennitala'}}`,
        encodeURIComponent(String(requestParameters.kennitala)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListDocumentsResponseFromJSON(jsonValue),
    )
  }

  /**
   */
  async customersListDocuments(
    requestParameters: CustomersListDocumentsRequest,
  ): Promise<ListDocumentsResponse> {
    const response = await this.customersListDocumentsRaw(requestParameters)
    return await response.value()
  }

  /**
   */
  async customersUnarchiveRaw(
    requestParameters: CustomersUnarchiveRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersUnarchive.',
      )
    }

    if (
      requestParameters.messageId === null ||
      requestParameters.messageId === undefined
    ) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling customersUnarchive.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/unarchive`
        .replace(
          `{${'kennitala'}}`,
          encodeURIComponent(String(requestParameters.kennitala)),
        )
        .replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async customersUnarchive(
    requestParameters: CustomersUnarchiveRequest,
  ): Promise<void> {
    await this.customersUnarchiveRaw(requestParameters)
  }

  /**
   */
  async customersUnbookmarkRaw(
    requestParameters: CustomersUnbookmarkRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.kennitala === null ||
      requestParameters.kennitala === undefined
    ) {
      throw new runtime.RequiredError(
        'kennitala',
        'Required parameter requestParameters.kennitala was null or undefined when calling customersUnbookmark.',
      )
    }

    if (
      requestParameters.messageId === null ||
      requestParameters.messageId === undefined
    ) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter requestParameters.messageId was null or undefined when calling customersUnbookmark.',
      )
    }

    const queryParameters: runtime.HTTPQuery = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/unbookmark`
        .replace(
          `{${'kennitala'}}`,
          encodeURIComponent(String(requestParameters.kennitala)),
        )
        .replace(
          `{${'messageId'}}`,
          encodeURIComponent(String(requestParameters.messageId)),
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   */
  async customersUnbookmark(
    requestParameters: CustomersUnbookmarkRequest,
  ): Promise<void> {
    await this.customersUnbookmarkRaw(requestParameters)
  }
}
