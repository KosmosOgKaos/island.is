/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Service Metadata API for REST
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ServiceIdType,
    ServiceIdTypeFromJSON,
    ServiceIdTypeFromJSONTyped,
    ServiceIdTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ServiceId
 */
export interface ServiceId {
    /**
     * 
     * @type {ServiceIdType}
     * @memberof ServiceId
     */
    type?: ServiceIdType;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    xRoadInstance?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    memberClass?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    memberCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    serviceVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    subsystemCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceId
     */
    serviceCode?: string;
}

export function ServiceIdFromJSON(json: any): ServiceId {
    return ServiceIdFromJSONTyped(json, false);
}

export function ServiceIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : ServiceIdTypeFromJSON(json['type']),
        'xRoadInstance': !exists(json, 'xRoadInstance') ? undefined : json['xRoadInstance'],
        'memberClass': !exists(json, 'memberClass') ? undefined : json['memberClass'],
        'memberCode': !exists(json, 'memberCode') ? undefined : json['memberCode'],
        'serviceVersion': !exists(json, 'serviceVersion') ? undefined : json['serviceVersion'],
        'subsystemCode': !exists(json, 'subsystemCode') ? undefined : json['subsystemCode'],
        'serviceCode': !exists(json, 'serviceCode') ? undefined : json['serviceCode'],
    };
}

export function ServiceIdToJSON(value?: ServiceId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ServiceIdTypeToJSON(value.type),
        'xRoadInstance': value.xRoadInstance,
        'memberClass': value.memberClass,
        'memberCode': value.memberCode,
        'serviceVersion': value.serviceVersion,
        'subsystemCode': value.subsystemCode,
        'serviceCode': value.serviceCode,
    };
}


