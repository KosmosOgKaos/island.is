/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Endpoint,
    EndpointFromJSON,
    EndpointToJSON,
    EndpointUpdate,
    EndpointUpdateFromJSON,
    EndpointUpdateToJSON,
    ServiceClient,
    ServiceClientFromJSON,
    ServiceClientToJSON,
    ServiceClients,
    ServiceClientsFromJSON,
    ServiceClientsToJSON,
} from '../models';

export interface AddEndpointServiceClientsRequest {
    id: string;
    serviceClients?: ServiceClients;
}

export interface DeleteEndpointRequest {
    id: string;
}

export interface DeleteEndpointServiceClientsRequest {
    id: string;
    serviceClients?: ServiceClients;
}

export interface GetEndpointRequest {
    id: string;
}

export interface GetEndpointServiceClientsRequest {
    id: string;
}

export interface UpdateEndpointRequest {
    id: string;
    endpointUpdate?: EndpointUpdate;
}

/**
 * 
 */
export class EndpointsApi extends runtime.BaseAPI {

    /**
     * Administrator add access rights for a service clients to the selected endpoint
     * add access rights for given service clients to the selected endpoint
     */
    async addEndpointServiceClientsRaw(requestParameters: AddEndpointServiceClientsRequest): Promise<runtime.ApiResponse<Array<ServiceClient>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addEndpointServiceClients.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}/service-clients`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceClientsToJSON(requestParameters.serviceClients),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceClientFromJSON));
    }

    /**
     * Administrator add access rights for a service clients to the selected endpoint
     * add access rights for given service clients to the selected endpoint
     */
    async addEndpointServiceClients(requestParameters: AddEndpointServiceClientsRequest): Promise<Array<ServiceClient>> {
        const response = await this.addEndpointServiceClientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator removes an endpoint
     * delete endpoint
     */
    async deleteEndpointRaw(requestParameters: DeleteEndpointRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator removes an endpoint
     * delete endpoint
     */
    async deleteEndpoint(requestParameters: DeleteEndpointRequest): Promise<void> {
        await this.deleteEndpointRaw(requestParameters);
    }

    /**
     * Administrator removes access rights from a service clients to an endpoint
     * remove access rights from specified service clients to the selected endpoint
     */
    async deleteEndpointServiceClientsRaw(requestParameters: DeleteEndpointServiceClientsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEndpointServiceClients.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}/service-clients/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceClientsToJSON(requestParameters.serviceClients),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator removes access rights from a service clients to an endpoint
     * remove access rights from specified service clients to the selected endpoint
     */
    async deleteEndpointServiceClients(requestParameters: DeleteEndpointServiceClientsRequest): Promise<void> {
        await this.deleteEndpointServiceClientsRaw(requestParameters);
    }

    /**
     * Administrator fetches an endpoint
     */
    async getEndpointRaw(requestParameters: GetEndpointRequest): Promise<runtime.ApiResponse<Endpoint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
    }

    /**
     * Administrator fetches an endpoint
     */
    async getEndpoint(requestParameters: GetEndpointRequest): Promise<Endpoint> {
        const response = await this.getEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator views endpoints access rights
     * get service clients who have access rights for the selected endpoint
     */
    async getEndpointServiceClientsRaw(requestParameters: GetEndpointServiceClientsRequest): Promise<runtime.ApiResponse<Array<ServiceClient>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEndpointServiceClients.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}/service-clients`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceClientFromJSON));
    }

    /**
     * Administrator views endpoints access rights
     * get service clients who have access rights for the selected endpoint
     */
    async getEndpointServiceClients(requestParameters: GetEndpointServiceClientsRequest): Promise<Array<ServiceClient>> {
        const response = await this.getEndpointServiceClientsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator updates an endpoint
     */
    async updateEndpointRaw(requestParameters: UpdateEndpointRequest): Promise<runtime.ApiResponse<Endpoint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/endpoints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EndpointUpdateToJSON(requestParameters.endpointUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
    }

    /**
     * Administrator updates an endpoint
     */
    async updateEndpoint(requestParameters: UpdateEndpointRequest): Promise<Endpoint> {
        const response = await this.updateEndpointRaw(requestParameters);
        return await response.value();
    }

}
