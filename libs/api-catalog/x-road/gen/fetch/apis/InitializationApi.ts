/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InitialServerConf,
    InitialServerConfFromJSON,
    InitialServerConfToJSON,
    InitializationStatus,
    InitializationStatusFromJSON,
    InitializationStatusToJSON,
} from '../models';

export interface InitSecurityServerRequest {
    initialServerConf?: InitialServerConf;
}

/**
 * 
 */
export class InitializationApi extends runtime.BaseAPI {

    /**
     * Administrator checks the initialization status of the Security Server
     * Check the initialization status of the Security Server
     */
    async getInitializationStatusRaw(): Promise<runtime.ApiResponse<InitializationStatus>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/initialization/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InitializationStatusFromJSON(jsonValue));
    }

    /**
     * Administrator checks the initialization status of the Security Server
     * Check the initialization status of the Security Server
     */
    async getInitializationStatus(): Promise<InitializationStatus> {
        const response = await this.getInitializationStatusRaw();
        return await response.value();
    }

    /**
     * Administrator initializes a new security server with the provided initial configuration
     * Initialize a new security server with the provided initial configuration
     */
    async initSecurityServerRaw(requestParameters: InitSecurityServerRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/initialization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitialServerConfToJSON(requestParameters.initialServerConf),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator initializes a new security server with the provided initial configuration
     * Initialize a new security server with the provided initial configuration
     */
    async initSecurityServer(requestParameters: InitSecurityServerRequest): Promise<void> {
        await this.initSecurityServerRaw(requestParameters);
    }

}
