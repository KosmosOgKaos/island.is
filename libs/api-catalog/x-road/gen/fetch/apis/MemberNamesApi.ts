/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MemberName,
    MemberNameFromJSON,
    MemberNameToJSON,
} from '../models';

export interface FindMemberNameRequest {
    memberClass: string;
    memberCode: string;
}

/**
 * 
 */
export class MemberNamesApi extends runtime.BaseAPI {

    /**
     * Administrator looks up member\'s name
     * find member name by member class and member code
     */
    async findMemberNameRaw(requestParameters: FindMemberNameRequest): Promise<runtime.ApiResponse<MemberName>> {
        if (requestParameters.memberClass === null || requestParameters.memberClass === undefined) {
            throw new runtime.RequiredError('memberClass','Required parameter requestParameters.memberClass was null or undefined when calling findMemberName.');
        }

        if (requestParameters.memberCode === null || requestParameters.memberCode === undefined) {
            throw new runtime.RequiredError('memberCode','Required parameter requestParameters.memberCode was null or undefined when calling findMemberName.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.memberClass !== undefined) {
            queryParameters['member_class'] = requestParameters.memberClass;
        }

        if (requestParameters.memberCode !== undefined) {
            queryParameters['member_code'] = requestParameters.memberCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/member-names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberNameFromJSON(jsonValue));
    }

    /**
     * Administrator looks up member\'s name
     * find member name by member class and member code
     */
    async findMemberName(requestParameters: FindMemberNameRequest): Promise<MemberName> {
        const response = await this.findMemberNameRaw(requestParameters);
        return await response.value();
    }

}
