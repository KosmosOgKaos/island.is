/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GlobalConfDiagnostics,
    GlobalConfDiagnosticsFromJSON,
    GlobalConfDiagnosticsToJSON,
    OcspResponderDiagnostics,
    OcspResponderDiagnosticsFromJSON,
    OcspResponderDiagnosticsToJSON,
    TimestampingServiceDiagnostics,
    TimestampingServiceDiagnosticsFromJSON,
    TimestampingServiceDiagnosticsToJSON,
} from '../models';

/**
 * 
 */
export class DiagnosticsApi extends runtime.BaseAPI {

    /**
     * Administrator views the global configuration diagnostics information.
     * view global configuration diagnostics information
     */
    async getGlobalConfDiagnosticsRaw(): Promise<runtime.ApiResponse<GlobalConfDiagnostics>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/diagnostics/globalconf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalConfDiagnosticsFromJSON(jsonValue));
    }

    /**
     * Administrator views the global configuration diagnostics information.
     * view global configuration diagnostics information
     */
    async getGlobalConfDiagnostics(): Promise<GlobalConfDiagnostics> {
        const response = await this.getGlobalConfDiagnosticsRaw();
        return await response.value();
    }

    /**
     * Administrator views the ocsp responders diagnostics information.
     * view ocsp responders diagnostics information
     */
    async getOcspRespondersDiagnosticsRaw(): Promise<runtime.ApiResponse<Array<OcspResponderDiagnostics>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/diagnostics/ocsp-responders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OcspResponderDiagnosticsFromJSON));
    }

    /**
     * Administrator views the ocsp responders diagnostics information.
     * view ocsp responders diagnostics information
     */
    async getOcspRespondersDiagnostics(): Promise<Array<OcspResponderDiagnostics>> {
        const response = await this.getOcspRespondersDiagnosticsRaw();
        return await response.value();
    }

    /**
     * Administrator views the timestamping services diagnostics information.
     * view timestamping services diagnostics information
     */
    async getTimestampingServicesDiagnosticsRaw(): Promise<runtime.ApiResponse<Array<TimestampingServiceDiagnostics>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/diagnostics/timestamping-services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimestampingServiceDiagnosticsFromJSON));
    }

    /**
     * Administrator views the timestamping services diagnostics information.
     * view timestamping services diagnostics information
     */
    async getTimestampingServicesDiagnostics(): Promise<Array<TimestampingServiceDiagnostics>> {
        const response = await this.getTimestampingServicesDiagnosticsRaw();
        return await response.value();
    }

}
