/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CertificateAuthority,
    CertificateAuthorityFromJSON,
    CertificateAuthorityToJSON,
    CsrSubjectFieldDescription,
    CsrSubjectFieldDescriptionFromJSON,
    CsrSubjectFieldDescriptionToJSON,
    KeyUsageType,
    KeyUsageTypeFromJSON,
    KeyUsageTypeToJSON,
} from '../models';

export interface GetApprovedCertificateAuthoritiesRequest {
    keyUsageType?: KeyUsageType;
    includeIntermediateCas?: boolean;
}

export interface GetSubjectFieldDescriptionsRequest {
    caName: string;
    keyUsageType: KeyUsageType;
    keyId?: string;
    memberId?: string;
    isNewMember?: boolean;
}

/**
 * 
 */
export class CertificateAuthoritiesApi extends runtime.BaseAPI {

    /**
     * Administrator views the approved certificate authorities.
     * view the approved certificate authorities
     */
    async getApprovedCertificateAuthoritiesRaw(requestParameters: GetApprovedCertificateAuthoritiesRequest): Promise<runtime.ApiResponse<Array<CertificateAuthority>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyUsageType !== undefined) {
            queryParameters['key_usage_type'] = requestParameters.keyUsageType;
        }

        if (requestParameters.includeIntermediateCas !== undefined) {
            queryParameters['include_intermediate_cas'] = requestParameters.includeIntermediateCas;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/certificate-authorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateAuthorityFromJSON));
    }

    /**
     * Administrator views the approved certificate authorities.
     * view the approved certificate authorities
     */
    async getApprovedCertificateAuthorities(requestParameters: GetApprovedCertificateAuthoritiesRequest): Promise<Array<CertificateAuthority>> {
        const response = await this.getApprovedCertificateAuthoritiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list DN field descriptions to collect CSR parameters
     * get description of subject DN fields for CSR
     */
    async getSubjectFieldDescriptionsRaw(requestParameters: GetSubjectFieldDescriptionsRequest): Promise<runtime.ApiResponse<Array<CsrSubjectFieldDescription>>> {
        if (requestParameters.caName === null || requestParameters.caName === undefined) {
            throw new runtime.RequiredError('caName','Required parameter requestParameters.caName was null or undefined when calling getSubjectFieldDescriptions.');
        }

        if (requestParameters.keyUsageType === null || requestParameters.keyUsageType === undefined) {
            throw new runtime.RequiredError('keyUsageType','Required parameter requestParameters.keyUsageType was null or undefined when calling getSubjectFieldDescriptions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.keyId !== undefined) {
            queryParameters['key_id'] = requestParameters.keyId;
        }

        if (requestParameters.keyUsageType !== undefined) {
            queryParameters['key_usage_type'] = requestParameters.keyUsageType;
        }

        if (requestParameters.memberId !== undefined) {
            queryParameters['member_id'] = requestParameters.memberId;
        }

        if (requestParameters.isNewMember !== undefined) {
            queryParameters['is_new_member'] = requestParameters.isNewMember;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/certificate-authorities/{ca_name}/csr-subject-fields`.replace(`{${"ca_name"}}`, encodeURIComponent(String(requestParameters.caName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CsrSubjectFieldDescriptionFromJSON));
    }

    /**
     * list DN field descriptions to collect CSR parameters
     * get description of subject DN fields for CSR
     */
    async getSubjectFieldDescriptions(requestParameters: GetSubjectFieldDescriptionsRequest): Promise<Array<CsrSubjectFieldDescription>> {
        const response = await this.getSubjectFieldDescriptionsRaw(requestParameters);
        return await response.value();
    }

}
