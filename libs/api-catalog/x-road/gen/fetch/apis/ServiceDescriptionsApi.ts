/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorInfo,
    ErrorInfoFromJSON,
    ErrorInfoToJSON,
    IgnoreWarnings,
    IgnoreWarningsFromJSON,
    IgnoreWarningsToJSON,
    Service,
    ServiceFromJSON,
    ServiceToJSON,
    ServiceDescription,
    ServiceDescriptionFromJSON,
    ServiceDescriptionToJSON,
    ServiceDescriptionDisabledNotice,
    ServiceDescriptionDisabledNoticeFromJSON,
    ServiceDescriptionDisabledNoticeToJSON,
    ServiceDescriptionUpdate,
    ServiceDescriptionUpdateFromJSON,
    ServiceDescriptionUpdateToJSON,
} from '../models';

export interface DeleteServiceDescriptionRequest {
    id: string;
}

export interface DisableServiceDescriptionRequest {
    id: string;
    serviceDescriptionDisabledNotice?: ServiceDescriptionDisabledNotice;
}

export interface EnableServiceDescriptionRequest {
    id: string;
}

export interface GetServiceDescriptionRequest {
    id: string;
}

export interface GetServiceDescriptionServicesRequest {
    id: string;
}

export interface RefreshServiceDescriptionRequest {
    id: string;
    ignoreWarnings?: IgnoreWarnings;
}

export interface UpdateServiceDescriptionRequest {
    id: string;
    serviceDescriptionUpdate?: ServiceDescriptionUpdate;
}

/**
 * 
 */
export class ServiceDescriptionsApi extends runtime.BaseAPI {

    /**
     * Administrator deletes the service description.
     * delete service description
     */
    async deleteServiceDescriptionRaw(requestParameters: DeleteServiceDescriptionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator deletes the service description.
     * delete service description
     */
    async deleteServiceDescription(requestParameters: DeleteServiceDescriptionRequest): Promise<void> {
        await this.deleteServiceDescriptionRaw(requestParameters);
    }

    /**
     * Administrator disables service description.
     * disable selected service description
     */
    async disableServiceDescriptionRaw(requestParameters: DisableServiceDescriptionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling disableServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}/disable`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceDescriptionDisabledNoticeToJSON(requestParameters.serviceDescriptionDisabledNotice),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator disables service description.
     * disable selected service description
     */
    async disableServiceDescription(requestParameters: DisableServiceDescriptionRequest): Promise<void> {
        await this.disableServiceDescriptionRaw(requestParameters);
    }

    /**
     * Administrator enables service description.
     * enable selected service description
     */
    async enableServiceDescriptionRaw(requestParameters: EnableServiceDescriptionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}/enable`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Administrator enables service description.
     * enable selected service description
     */
    async enableServiceDescription(requestParameters: EnableServiceDescriptionRequest): Promise<void> {
        await this.enableServiceDescriptionRaw(requestParameters);
    }

    /**
     * Administrator views a service description with a certain id.
     * get service description with provided id
     */
    async getServiceDescriptionRaw(requestParameters: GetServiceDescriptionRequest): Promise<runtime.ApiResponse<ServiceDescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDescriptionFromJSON(jsonValue));
    }

    /**
     * Administrator views a service description with a certain id.
     * get service description with provided id
     */
    async getServiceDescription(requestParameters: GetServiceDescriptionRequest): Promise<ServiceDescription> {
        const response = await this.getServiceDescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator views the services for the selected service description.
     * get services for the selected service description
     */
    async getServiceDescriptionServicesRaw(requestParameters: GetServiceDescriptionServicesRequest): Promise<runtime.ApiResponse<Array<Service>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getServiceDescriptionServices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}/services`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceFromJSON));
    }

    /**
     * Administrator views the services for the selected service description.
     * get services for the selected service description
     */
    async getServiceDescriptionServices(requestParameters: GetServiceDescriptionServicesRequest): Promise<Array<Service>> {
        const response = await this.getServiceDescriptionServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator refreshes service description.
     * refresh selected service description
     */
    async refreshServiceDescriptionRaw(requestParameters: RefreshServiceDescriptionRequest): Promise<runtime.ApiResponse<ServiceDescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling refreshServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}/refresh`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IgnoreWarningsToJSON(requestParameters.ignoreWarnings),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDescriptionFromJSON(jsonValue));
    }

    /**
     * Administrator refreshes service description.
     * refresh selected service description
     */
    async refreshServiceDescription(requestParameters: RefreshServiceDescriptionRequest): Promise<ServiceDescription> {
        const response = await this.refreshServiceDescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator updates the selected service description.
     * update url or service code for the selected service description
     */
    async updateServiceDescriptionRaw(requestParameters: UpdateServiceDescriptionRequest): Promise<runtime.ApiResponse<ServiceDescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateServiceDescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/service-descriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceDescriptionUpdateToJSON(requestParameters.serviceDescriptionUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceDescriptionFromJSON(jsonValue));
    }

    /**
     * Administrator updates the selected service description.
     * update url or service code for the selected service description
     */
    async updateServiceDescription(requestParameters: UpdateServiceDescriptionRequest): Promise<ServiceDescription> {
        const response = await this.updateServiceDescriptionRaw(requestParameters);
        return await response.value();
    }

}
