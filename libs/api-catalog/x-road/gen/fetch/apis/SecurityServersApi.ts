/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SecurityServer,
    SecurityServerFromJSON,
    SecurityServerToJSON,
} from '../models';

export interface GetSecurityServerRequest {
    id: string;
}

export interface GetSecurityServersRequest {
    currentServer?: boolean;
}

/**
 * 
 */
export class SecurityServersApi extends runtime.BaseAPI {

    /**
     * SS administrator views the details of a security server.
     * get security server information
     */
    async getSecurityServerRaw(requestParameters: GetSecurityServerRequest): Promise<runtime.ApiResponse<SecurityServer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSecurityServer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/security-servers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityServerFromJSON(jsonValue));
    }

    /**
     * SS administrator views the details of a security server.
     * get security server information
     */
    async getSecurityServer(requestParameters: GetSecurityServerRequest): Promise<SecurityServer> {
        const response = await this.getSecurityServerRaw(requestParameters);
        return await response.value();
    }

    /**
     * SS administrator views the details of all security servers
     * get all security servers
     */
    async getSecurityServersRaw(requestParameters: GetSecurityServersRequest): Promise<runtime.ApiResponse<Array<SecurityServer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.currentServer !== undefined) {
            queryParameters['current_server'] = requestParameters.currentServer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/security-servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityServerFromJSON));
    }

    /**
     * SS administrator views the details of all security servers
     * get all security servers
     */
    async getSecurityServers(requestParameters: GetSecurityServersRequest): Promise<Array<SecurityServer>> {
        const response = await this.getSecurityServersRaw(requestParameters);
        return await response.value();
    }

}
