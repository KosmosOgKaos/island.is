/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Key,
    KeyFromJSON,
    KeyToJSON,
    KeyLabel,
    KeyLabelFromJSON,
    KeyLabelToJSON,
    KeyLabelWithCsrGenerate,
    KeyLabelWithCsrGenerateFromJSON,
    KeyLabelWithCsrGenerateToJSON,
    KeyWithCertificateSigningRequestId,
    KeyWithCertificateSigningRequestIdFromJSON,
    KeyWithCertificateSigningRequestIdToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
    TokenName,
    TokenNameFromJSON,
    TokenNameToJSON,
    TokenPassword,
    TokenPasswordFromJSON,
    TokenPasswordToJSON,
} from '../models';

export interface AddKeyRequest {
    id: string;
    keyLabel?: KeyLabel;
}

export interface AddKeyAndCsrRequest {
    id: string;
    keyLabelWithCsrGenerate?: KeyLabelWithCsrGenerate;
}

export interface GetTokenRequest {
    id: string;
}

export interface LoginTokenRequest {
    id: string;
    tokenPassword?: TokenPassword;
}

export interface LogoutTokenRequest {
    id: string;
}

export interface UpdateTokenRequest {
    id: string;
    tokenName?: TokenName;
}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI {

    /**
     * Adds key for selected token.
     * add new key
     */
    async addKeyRaw(requestParameters: AddKeyRequest): Promise<runtime.ApiResponse<Key>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}/keys`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyLabelToJSON(requestParameters.keyLabel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyFromJSON(jsonValue));
    }

    /**
     * Adds key for selected token.
     * add new key
     */
    async addKey(requestParameters: AddKeyRequest): Promise<Key> {
        const response = await this.addKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator adds a new key and generates a csr for it.
     * add a new key and generate a csr for it
     */
    async addKeyAndCsrRaw(requestParameters: AddKeyAndCsrRequest): Promise<runtime.ApiResponse<KeyWithCertificateSigningRequestId>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addKeyAndCsr.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}/keys-with-csrs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeyLabelWithCsrGenerateToJSON(requestParameters.keyLabelWithCsrGenerate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyWithCertificateSigningRequestIdFromJSON(jsonValue));
    }

    /**
     * Administrator adds a new key and generates a csr for it.
     * add a new key and generate a csr for it
     */
    async addKeyAndCsr(requestParameters: AddKeyAndCsrRequest): Promise<KeyWithCertificateSigningRequestId> {
        const response = await this.addKeyAndCsrRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator views the token details of the security server.
     * get security server token information
     */
    async getTokenRaw(requestParameters: GetTokenRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Administrator views the token details of the security server.
     * get security server token information
     */
    async getToken(requestParameters: GetTokenRequest): Promise<Token> {
        const response = await this.getTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator views tokens of the security server.
     * get security server tokens
     */
    async getTokensRaw(): Promise<runtime.ApiResponse<Array<Token>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenFromJSON));
    }

    /**
     * Administrator views tokens of the security server.
     * get security server tokens
     */
    async getTokens(): Promise<Array<Token>> {
        const response = await this.getTokensRaw();
        return await response.value();
    }

    /**
     * Login to token
     * login to token
     */
    async loginTokenRaw(requestParameters: LoginTokenRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling loginToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}/login`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TokenPasswordToJSON(requestParameters.tokenPassword),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Login to token
     * login to token
     */
    async loginToken(requestParameters: LoginTokenRequest): Promise<Token> {
        const response = await this.loginTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator logs out from token.
     * logout from token
     */
    async logoutTokenRaw(requestParameters: LogoutTokenRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling logoutToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}/logout`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Administrator logs out from token.
     * logout from token
     */
    async logoutToken(requestParameters: LogoutTokenRequest): Promise<Token> {
        const response = await this.logoutTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrator updates the token information.
     * update security server token information
     */
    async updateTokenRaw(requestParameters: UpdateTokenRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TokenNameToJSON(requestParameters.tokenName),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Administrator updates the token information.
     * update security server token information
     */
    async updateToken(requestParameters: UpdateTokenRequest): Promise<Token> {
        const response = await this.updateTokenRaw(requestParameters);
        return await response.value();
    }

}
