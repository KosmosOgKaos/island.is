/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Service,
    ServiceFromJSON,
    ServiceFromJSONTyped,
    ServiceToJSON,
    ServiceType,
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
} from './';

/**
 * WSDL/OPENAPI3/REST service
 * @export
 * @interface ServiceDescription
 */
export interface ServiceDescription {
    /**
     * unique identifier
     * @type {string}
     * @memberof ServiceDescription
     */
    id: string;
    /**
     * service url
     * @type {string}
     * @memberof ServiceDescription
     */
    url: string;
    /**
     * 
     * @type {ServiceType}
     * @memberof ServiceDescription
     */
    type: ServiceType;
    /**
     * service disabled
     * @type {boolean}
     * @memberof ServiceDescription
     */
    disabled: boolean;
    /**
     * disabled notice
     * @type {string}
     * @memberof ServiceDescription
     */
    disabledNotice: string;
    /**
     * time for service refresh
     * @type {Date}
     * @memberof ServiceDescription
     */
    refreshedAt: Date;
    /**
     * service description services
     * @type {Array<Service>}
     * @memberof ServiceDescription
     */
    services: Array<Service>;
    /**
     * <instance_id>:<member_class>:<member_code>:<subsystem>(optional)
     * @type {string}
     * @memberof ServiceDescription
     */
    clientId: string;
}

export function ServiceDescriptionFromJSON(json: any): ServiceDescription {
    return ServiceDescriptionFromJSONTyped(json, false);
}

export function ServiceDescriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceDescription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'url': json['url'],
        'type': ServiceTypeFromJSON(json['type']),
        'disabled': json['disabled'],
        'disabledNotice': json['disabled_notice'],
        'refreshedAt': (new Date(json['refreshed_at'])),
        'services': ((json['services'] as Array<any>).map(ServiceFromJSON)),
        'clientId': json['client_id'],
    };
}

export function ServiceDescriptionToJSON(value?: ServiceDescription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'url': value.url,
        'type': ServiceTypeToJSON(value.type),
        'disabled': value.disabled,
        'disabled_notice': value.disabledNotice,
        'refreshed_at': (value.refreshedAt.toISOString()),
        'services': ((value.services as Array<any>).map(ServiceToJSON)),
        'client_id': value.clientId,
    };
}


