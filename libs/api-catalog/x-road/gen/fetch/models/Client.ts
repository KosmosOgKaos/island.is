/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ClientStatus,
    ClientStatusFromJSON,
    ClientStatusFromJSONTyped,
    ClientStatusToJSON,
    ConnectionType,
    ConnectionTypeFromJSON,
    ConnectionTypeFromJSONTyped,
    ConnectionTypeToJSON,
} from './';

/**
 * x-road client
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * <instance_id>:<member_class>:<member_code>:<subsystem>(optional)
     * @type {string}
     * @memberof Client
     */
    readonly id?: string;
    /**
     * xroad instance id
     * @type {string}
     * @memberof Client
     */
    readonly instanceId?: string;
    /**
     * member name
     * @type {string}
     * @memberof Client
     */
    readonly memberName?: string;
    /**
     * member class
     * @type {string}
     * @memberof Client
     */
    memberClass: string;
    /**
     * member code
     * @type {string}
     * @memberof Client
     */
    memberCode: string;
    /**
     * subsystem code
     * @type {string}
     * @memberof Client
     */
    subsystemCode?: string;
    /**
     * if this client is the owner member of this security server
     * @type {boolean}
     * @memberof Client
     */
    readonly owner?: boolean;
    /**
     * if this client is local and has a valid sign cert
     * @type {boolean}
     * @memberof Client
     */
    readonly hasValidLocalSignCert?: boolean;
    /**
     * 
     * @type {ConnectionType}
     * @memberof Client
     */
    connectionType?: ConnectionType;
    /**
     * 
     * @type {ClientStatus}
     * @memberof Client
     */
    status?: ClientStatus;
}

export function ClientFromJSON(json: any): Client {
    return ClientFromJSONTyped(json, false);
}

export function ClientFromJSONTyped(json: any, ignoreDiscriminator: boolean): Client {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'instanceId': !exists(json, 'instance_id') ? undefined : json['instance_id'],
        'memberName': !exists(json, 'member_name') ? undefined : json['member_name'],
        'memberClass': json['member_class'],
        'memberCode': json['member_code'],
        'subsystemCode': !exists(json, 'subsystem_code') ? undefined : json['subsystem_code'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'hasValidLocalSignCert': !exists(json, 'has_valid_local_sign_cert') ? undefined : json['has_valid_local_sign_cert'],
        'connectionType': !exists(json, 'connection_type') ? undefined : ConnectionTypeFromJSON(json['connection_type']),
        'status': !exists(json, 'status') ? undefined : ClientStatusFromJSON(json['status']),
    };
}

export function ClientToJSON(value?: Client | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'member_class': value.memberClass,
        'member_code': value.memberCode,
        'subsystem_code': value.subsystemCode,
        'connection_type': ConnectionTypeToJSON(value.connectionType),
        'status': ClientStatusToJSON(value.status),
    };
}


