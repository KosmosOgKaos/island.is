/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    KeyUsageType,
    KeyUsageTypeFromJSON,
    KeyUsageTypeFromJSONTyped,
    KeyUsageTypeToJSON,
    PossibleAction,
    PossibleActionFromJSON,
    PossibleActionFromJSONTyped,
    PossibleActionToJSON,
    TokenCertificate,
    TokenCertificateFromJSON,
    TokenCertificateFromJSONTyped,
    TokenCertificateToJSON,
    TokenCertificateSigningRequest,
    TokenCertificateSigningRequestFromJSON,
    TokenCertificateSigningRequestFromJSONTyped,
    TokenCertificateSigningRequestToJSON,
} from './';

/**
 * key for the certificate
 * @export
 * @interface Key
 */
export interface Key {
    /**
     * key id
     * @type {string}
     * @memberof Key
     */
    readonly id: string;
    /**
     * key name
     * @type {string}
     * @memberof Key
     */
    name: string;
    /**
     * key label
     * @type {string}
     * @memberof Key
     */
    label: string;
    /**
     * list of certificates for the key
     * @type {Array<TokenCertificate>}
     * @memberof Key
     */
    certificates: Array<TokenCertificate>;
    /**
     * list of CSRs for the key
     * @type {Array<TokenCertificateSigningRequest>}
     * @memberof Key
     */
    certificateSigningRequests: Array<TokenCertificateSigningRequest>;
    /**
     * 
     * @type {KeyUsageType}
     * @memberof Key
     */
    usage: KeyUsageType;
    /**
     * if the key is available
     * @type {boolean}
     * @memberof Key
     */
    available?: boolean;
    /**
     * if the key is saved to configuration
     * @type {boolean}
     * @memberof Key
     */
    savedToConfiguration?: boolean;
    /**
     * array containing the possible actions that can be done for this item
     * @type {Array<PossibleAction>}
     * @memberof Key
     */
    possibleActions?: Array<PossibleAction>;
}

export function KeyFromJSON(json: any): Key {
    return KeyFromJSONTyped(json, false);
}

export function KeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Key {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'label': json['label'],
        'certificates': ((json['certificates'] as Array<any>).map(TokenCertificateFromJSON)),
        'certificateSigningRequests': ((json['certificate_signing_requests'] as Array<any>).map(TokenCertificateSigningRequestFromJSON)),
        'usage': KeyUsageTypeFromJSON(json['usage']),
        'available': !exists(json, 'available') ? undefined : json['available'],
        'savedToConfiguration': !exists(json, 'saved_to_configuration') ? undefined : json['saved_to_configuration'],
        'possibleActions': !exists(json, 'possible_actions') ? undefined : ((json['possible_actions'] as Array<any>).map(PossibleActionFromJSON)),
    };
}

export function KeyToJSON(value?: Key | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'label': value.label,
        'certificates': ((value.certificates as Array<any>).map(TokenCertificateToJSON)),
        'certificate_signing_requests': ((value.certificateSigningRequests as Array<any>).map(TokenCertificateSigningRequestToJSON)),
        'usage': KeyUsageTypeToJSON(value.usage),
        'available': value.available,
        'saved_to_configuration': value.savedToConfiguration,
        'possible_actions': value.possibleActions === undefined ? undefined : ((value.possibleActions as Array<any>).map(PossibleActionToJSON)),
    };
}


