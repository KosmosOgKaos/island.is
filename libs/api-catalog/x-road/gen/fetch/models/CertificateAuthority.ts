/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CertificateAuthorityOcspResponse,
    CertificateAuthorityOcspResponseFromJSON,
    CertificateAuthorityOcspResponseFromJSONTyped,
    CertificateAuthorityOcspResponseToJSON,
} from './';

/**
 * approved certificate authority information. Only for top CAs.
 * @export
 * @interface CertificateAuthority
 */
export interface CertificateAuthority {
    /**
     * name of the CA, as defined in global conf. Used also as an identifier
     * @type {string}
     * @memberof CertificateAuthority
     */
    name: string;
    /**
     * subject distinguished name
     * @type {string}
     * @memberof CertificateAuthority
     */
    subjectDistinguishedName: string;
    /**
     * issuer distinguished name
     * @type {string}
     * @memberof CertificateAuthority
     */
    issuerDistinguishedName: string;
    /**
     * 
     * @type {CertificateAuthorityOcspResponse}
     * @memberof CertificateAuthority
     */
    ocspResponse: CertificateAuthorityOcspResponse;
    /**
     * certificate authority expires at
     * @type {Date}
     * @memberof CertificateAuthority
     */
    notAfter: Date;
    /**
     * if the certificate authority is top CA (instead of intermediate)
     * @type {boolean}
     * @memberof CertificateAuthority
     */
    topCa: boolean;
    /**
     * encoded path string from this CA to top CA
     * @type {string}
     * @memberof CertificateAuthority
     */
    path: string;
    /**
     * if certificate authority is limited for authentication use only
     * @type {boolean}
     * @memberof CertificateAuthority
     */
    authenticationOnly: boolean;
}

export function CertificateAuthorityFromJSON(json: any): CertificateAuthority {
    return CertificateAuthorityFromJSONTyped(json, false);
}

export function CertificateAuthorityFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateAuthority {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'subjectDistinguishedName': json['subject_distinguished_name'],
        'issuerDistinguishedName': json['issuer_distinguished_name'],
        'ocspResponse': CertificateAuthorityOcspResponseFromJSON(json['ocsp_response']),
        'notAfter': (new Date(json['not_after'])),
        'topCa': json['top_ca'],
        'path': json['path'],
        'authenticationOnly': json['authentication_only'],
    };
}

export function CertificateAuthorityToJSON(value?: CertificateAuthority | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'subject_distinguished_name': value.subjectDistinguishedName,
        'issuer_distinguished_name': value.issuerDistinguishedName,
        'ocsp_response': CertificateAuthorityOcspResponseToJSON(value.ocspResponse),
        'not_after': (value.notAfter.toISOString()),
        'top_ca': value.topCa,
        'path': value.path,
        'authentication_only': value.authenticationOnly,
    };
}


