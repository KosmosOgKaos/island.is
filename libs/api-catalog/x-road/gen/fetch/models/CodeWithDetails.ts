/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * object that contains a code identifier and possibly collection of associated metadata or validation errors. Used to relay error and warning information.
 * @export
 * @interface CodeWithDetails
 */
export interface CodeWithDetails {
    /**
     * identifier of the item (for example errorcode)
     * @type {string}
     * @memberof CodeWithDetails
     */
    code: string;
    /**
     * array containing metadata associated with the item. For example names of services were attempted to add, but failed
     * @type {Array<string>}
     * @memberof CodeWithDetails
     */
    metadata?: Array<string>;
    /**
     * A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors
     * @type {{ [key: string]: Array<string>; }}
     * @memberof CodeWithDetails
     */
    validationErrors?: { [key: string]: Array<string>; };
}

export function CodeWithDetailsFromJSON(json: any): CodeWithDetails {
    return CodeWithDetailsFromJSONTyped(json, false);
}

export function CodeWithDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CodeWithDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'validationErrors': !exists(json, 'validation_errors') ? undefined : json['validation_errors'],
    };
}

export function CodeWithDetailsToJSON(value?: CodeWithDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'metadata': value.metadata,
        'validation_errors': value.validationErrors,
    };
}


