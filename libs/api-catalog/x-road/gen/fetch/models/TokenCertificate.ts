/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CertificateDetails,
    CertificateDetailsFromJSON,
    CertificateDetailsFromJSONTyped,
    CertificateDetailsToJSON,
    CertificateOcspStatus,
    CertificateOcspStatusFromJSON,
    CertificateOcspStatusFromJSONTyped,
    CertificateOcspStatusToJSON,
    CertificateStatus,
    CertificateStatusFromJSON,
    CertificateStatusFromJSONTyped,
    CertificateStatusToJSON,
    PossibleAction,
    PossibleActionFromJSON,
    PossibleActionFromJSONTyped,
    PossibleActionToJSON,
} from './';

/**
 * certificate that is stored in a Token (auth or sign cert)
 * @export
 * @interface TokenCertificate
 */
export interface TokenCertificate {
    /**
     * 
     * @type {CertificateOcspStatus}
     * @memberof TokenCertificate
     */
    ocspStatus: CertificateOcspStatus;
    /**
     * client id of the owner member, <instance_id>:<member_class>:<member_code>
     * @type {string}
     * @memberof TokenCertificate
     */
    readonly ownerId: string;
    /**
     * if the certificate is active
     * @type {boolean}
     * @memberof TokenCertificate
     */
    active: boolean;
    /**
     * if the certificate is saved to configuration
     * @type {boolean}
     * @memberof TokenCertificate
     */
    savedToConfiguration: boolean;
    /**
     * 
     * @type {CertificateDetails}
     * @memberof TokenCertificate
     */
    certificateDetails: CertificateDetails;
    /**
     * 
     * @type {CertificateStatus}
     * @memberof TokenCertificate
     */
    status: CertificateStatus;
    /**
     * array containing the possible actions that can be done for this item
     * @type {Array<PossibleAction>}
     * @memberof TokenCertificate
     */
    possibleActions?: Array<PossibleAction>;
}

export function TokenCertificateFromJSON(json: any): TokenCertificate {
    return TokenCertificateFromJSONTyped(json, false);
}

export function TokenCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenCertificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ocspStatus': CertificateOcspStatusFromJSON(json['ocsp_status']),
        'ownerId': json['owner_id'],
        'active': json['active'],
        'savedToConfiguration': json['saved_to_configuration'],
        'certificateDetails': CertificateDetailsFromJSON(json['certificate_details']),
        'status': CertificateStatusFromJSON(json['status']),
        'possibleActions': !exists(json, 'possible_actions') ? undefined : ((json['possible_actions'] as Array<any>).map(PossibleActionFromJSON)),
    };
}

export function TokenCertificateToJSON(value?: TokenCertificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ocsp_status': CertificateOcspStatusToJSON(value.ocspStatus),
        'active': value.active,
        'saved_to_configuration': value.savedToConfiguration,
        'certificate_details': CertificateDetailsToJSON(value.certificateDetails),
        'status': CertificateStatusToJSON(value.status),
        'possible_actions': value.possibleActions === undefined ? undefined : ((value.possibleActions as Array<any>).map(PossibleActionToJSON)),
    };
}


