/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CsrFormat,
    CsrFormatFromJSON,
    CsrFormatFromJSONTyped,
    CsrFormatToJSON,
    KeyUsageType,
    KeyUsageTypeFromJSON,
    KeyUsageTypeFromJSONTyped,
    KeyUsageTypeToJSON,
} from './';

/**
 * request to generate a CSR
 * @export
 * @interface CsrGenerate
 */
export interface CsrGenerate {
    /**
     * 
     * @type {KeyUsageType}
     * @memberof CsrGenerate
     */
    keyUsageType: KeyUsageType;
    /**
     * common name of the CA
     * @type {string}
     * @memberof CsrGenerate
     */
    caName: string;
    /**
     * 
     * @type {CsrFormat}
     * @memberof CsrGenerate
     */
    csrFormat: CsrFormat;
    /**
     * member client id for signing CSRs. <instance_id>:<member_class>:<member_code>
     * @type {string}
     * @memberof CsrGenerate
     */
    memberId?: string;
    /**
     * user-provided values for subject DN parameters
     * @type {{ [key: string]: string; }}
     * @memberof CsrGenerate
     */
    subjectFieldValues: { [key: string]: string; };
}

export function CsrGenerateFromJSON(json: any): CsrGenerate {
    return CsrGenerateFromJSONTyped(json, false);
}

export function CsrGenerateFromJSONTyped(json: any, ignoreDiscriminator: boolean): CsrGenerate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyUsageType': KeyUsageTypeFromJSON(json['key_usage_type']),
        'caName': json['ca_name'],
        'csrFormat': CsrFormatFromJSON(json['csr_format']),
        'memberId': !exists(json, 'member_id') ? undefined : json['member_id'],
        'subjectFieldValues': json['subject_field_values'],
    };
}

export function CsrGenerateToJSON(value?: CsrGenerate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key_usage_type': KeyUsageTypeToJSON(value.keyUsageType),
        'ca_name': value.caName,
        'csr_format': CsrFormatToJSON(value.csrFormat),
        'member_id': value.memberId,
        'subject_field_values': value.subjectFieldValues,
    };
}


