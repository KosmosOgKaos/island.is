/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PossibleAction,
    PossibleActionFromJSON,
    PossibleActionFromJSONTyped,
    PossibleActionToJSON,
} from './';

/**
 * CSR for certificate that is stored in a Token
 * @export
 * @interface TokenCertificateSigningRequest
 */
export interface TokenCertificateSigningRequest {
    /**
     * CSR id
     * @type {string}
     * @memberof TokenCertificateSigningRequest
     */
    readonly id: string;
    /**
     * client id of the owner member, <instance_id>:<member_class>:<member_code>
     * @type {string}
     * @memberof TokenCertificateSigningRequest
     */
    readonly ownerId: string;
    /**
     * array containing the possible actions that can be done for this item
     * @type {Array<PossibleAction>}
     * @memberof TokenCertificateSigningRequest
     */
    possibleActions: Array<PossibleAction>;
}

export function TokenCertificateSigningRequestFromJSON(json: any): TokenCertificateSigningRequest {
    return TokenCertificateSigningRequestFromJSONTyped(json, false);
}

export function TokenCertificateSigningRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenCertificateSigningRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ownerId': json['owner_id'],
        'possibleActions': ((json['possible_actions'] as Array<any>).map(PossibleActionFromJSON)),
    };
}

export function TokenCertificateSigningRequestToJSON(value?: TokenCertificateSigningRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'possible_actions': ((value.possibleActions as Array<any>).map(PossibleActionToJSON)),
    };
}


