/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Key,
    KeyFromJSON,
    KeyFromJSONTyped,
    KeyToJSON,
    KeyValuePair,
    KeyValuePairFromJSON,
    KeyValuePairFromJSONTyped,
    KeyValuePairToJSON,
    PossibleAction,
    PossibleActionFromJSON,
    PossibleActionFromJSONTyped,
    PossibleActionToJSON,
    TokenStatus,
    TokenStatusFromJSON,
    TokenStatusFromJSONTyped,
    TokenStatusToJSON,
    TokenType,
    TokenTypeFromJSON,
    TokenTypeFromJSONTyped,
    TokenTypeToJSON,
} from './';

/**
 * token
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * token id
     * @type {string}
     * @memberof Token
     */
    readonly id: string;
    /**
     * token name
     * @type {string}
     * @memberof Token
     */
    name: string;
    /**
     * 
     * @type {TokenType}
     * @memberof Token
     */
    type: TokenType;
    /**
     * token keys
     * @type {Array<Key>}
     * @memberof Token
     */
    keys: Array<Key>;
    /**
     * 
     * @type {TokenStatus}
     * @memberof Token
     */
    status: TokenStatus;
    /**
     * if the token has been logged in to
     * @type {boolean}
     * @memberof Token
     */
    loggedIn: boolean;
    /**
     * if the token is available
     * @type {boolean}
     * @memberof Token
     */
    available: boolean;
    /**
     * if the token is saved to configuration
     * @type {boolean}
     * @memberof Token
     */
    savedToConfiguration: boolean;
    /**
     * if the token is read-only
     * @type {boolean}
     * @memberof Token
     */
    readOnly: boolean;
    /**
     * serial number of the token
     * @type {string}
     * @memberof Token
     */
    serialNumber?: string;
    /**
     * Contains label-value pairs of information
     * @type {Array<KeyValuePair>}
     * @memberof Token
     */
    tokenInfos?: Array<KeyValuePair>;
    /**
     * array containing the possible actions that can be done for this item
     * @type {Array<PossibleAction>}
     * @memberof Token
     */
    possibleActions?: Array<PossibleAction>;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': TokenTypeFromJSON(json['type']),
        'keys': ((json['keys'] as Array<any>).map(KeyFromJSON)),
        'status': TokenStatusFromJSON(json['status']),
        'loggedIn': json['logged_in'],
        'available': json['available'],
        'savedToConfiguration': json['saved_to_configuration'],
        'readOnly': json['read_only'],
        'serialNumber': !exists(json, 'serial_number') ? undefined : json['serial_number'],
        'tokenInfos': !exists(json, 'token_infos') ? undefined : ((json['token_infos'] as Array<any>).map(KeyValuePairFromJSON)),
        'possibleActions': !exists(json, 'possible_actions') ? undefined : ((json['possible_actions'] as Array<any>).map(PossibleActionFromJSON)),
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': TokenTypeToJSON(value.type),
        'keys': ((value.keys as Array<any>).map(KeyToJSON)),
        'status': TokenStatusToJSON(value.status),
        'logged_in': value.loggedIn,
        'available': value.available,
        'saved_to_configuration': value.savedToConfiguration,
        'read_only': value.readOnly,
        'serial_number': value.serialNumber,
        'token_infos': value.tokenInfos === undefined ? undefined : ((value.tokenInfos as Array<any>).map(KeyValuePairToJSON)),
        'possible_actions': value.possibleActions === undefined ? undefined : ((value.possibleActions as Array<any>).map(PossibleActionToJSON)),
    };
}


