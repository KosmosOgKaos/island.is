/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Security Server Admin API
 * X-Road Security Server Admin API
 *
 * The version of the OpenAPI document: 1.0.28
 * Contact: info@niis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    KeyUsage,
    KeyUsageFromJSON,
    KeyUsageFromJSONTyped,
    KeyUsageToJSON,
} from './';

/**
 * certificate details for any kind of certificate (TLS, auth, sign)
 * @export
 * @interface CertificateDetails
 */
export interface CertificateDetails {
    /**
     * certificate issuer distinguished name
     * @type {string}
     * @memberof CertificateDetails
     */
    issuerDistinguishedName: string;
    /**
     * certificate issuer common name
     * @type {string}
     * @memberof CertificateDetails
     */
    issuerCommonName: string;
    /**
     * certificate subject distinguished name
     * @type {string}
     * @memberof CertificateDetails
     */
    subjectDistinguishedName: string;
    /**
     * certificate subject common name
     * @type {string}
     * @memberof CertificateDetails
     */
    subjectCommonName: string;
    /**
     * certificate validity not before
     * @type {Date}
     * @memberof CertificateDetails
     */
    notBefore: Date;
    /**
     * certificate validity not after
     * @type {Date}
     * @memberof CertificateDetails
     */
    notAfter: Date;
    /**
     * serial number
     * @type {string}
     * @memberof CertificateDetails
     */
    serial: string;
    /**
     * version
     * @type {number}
     * @memberof CertificateDetails
     */
    version: number;
    /**
     * certificate signature algorithm
     * @type {string}
     * @memberof CertificateDetails
     */
    signatureAlgorithm: string;
    /**
     * hex encoded certificate signature
     * @type {string}
     * @memberof CertificateDetails
     */
    signature: string;
    /**
     * certificate public key algorithm
     * @type {string}
     * @memberof CertificateDetails
     */
    publicKeyAlgorithm: string;
    /**
     * hex encoded RSA public key modulus (if RSA key)
     * @type {string}
     * @memberof CertificateDetails
     */
    rsaPublicKeyModulus: string;
    /**
     * RSA public key exponent (if RSA key) as an integer
     * @type {number}
     * @memberof CertificateDetails
     */
    rsaPublicKeyExponent: number;
    /**
     * certificate SHA-1 hash
     * @type {string}
     * @memberof CertificateDetails
     */
    hash: string;
    /**
     * certificate key usage array
     * @type {Array<KeyUsage>}
     * @memberof CertificateDetails
     */
    keyUsages: Array<KeyUsage>;
}

export function CertificateDetailsFromJSON(json: any): CertificateDetails {
    return CertificateDetailsFromJSONTyped(json, false);
}

export function CertificateDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issuerDistinguishedName': json['issuer_distinguished_name'],
        'issuerCommonName': json['issuer_common_name'],
        'subjectDistinguishedName': json['subject_distinguished_name'],
        'subjectCommonName': json['subject_common_name'],
        'notBefore': (new Date(json['not_before'])),
        'notAfter': (new Date(json['not_after'])),
        'serial': json['serial'],
        'version': json['version'],
        'signatureAlgorithm': json['signature_algorithm'],
        'signature': json['signature'],
        'publicKeyAlgorithm': json['public_key_algorithm'],
        'rsaPublicKeyModulus': json['rsa_public_key_modulus'],
        'rsaPublicKeyExponent': json['rsa_public_key_exponent'],
        'hash': json['hash'],
        'keyUsages': ((json['key_usages'] as Array<any>).map(KeyUsageFromJSON)),
    };
}

export function CertificateDetailsToJSON(value?: CertificateDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issuer_distinguished_name': value.issuerDistinguishedName,
        'issuer_common_name': value.issuerCommonName,
        'subject_distinguished_name': value.subjectDistinguishedName,
        'subject_common_name': value.subjectCommonName,
        'not_before': (value.notBefore.toISOString()),
        'not_after': (value.notAfter.toISOString()),
        'serial': value.serial,
        'version': value.version,
        'signature_algorithm': value.signatureAlgorithm,
        'signature': value.signature,
        'public_key_algorithm': value.publicKeyAlgorithm,
        'rsa_public_key_modulus': value.rsaPublicKeyModulus,
        'rsa_public_key_exponent': value.rsaPublicKeyExponent,
        'hash': value.hash,
        'key_usages': ((value.keyUsages as Array<any>).map(KeyUsageToJSON)),
    };
}


